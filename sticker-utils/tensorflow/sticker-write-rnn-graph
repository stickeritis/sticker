#!/usr/bin/env python3

from rnn_model import RNNModel
from write_helper import get_common_parser, parse_common_config, create_graph

if __name__ == '__main__':
    parser = get_common_parser()

    parser.add_argument(
        "--gru",
        help="use GRU RNN cells",
        action="store_true")
    parser.add_argument(
        "--hidden_size",
        type=int,
        help="neurons in the hidden layer of the rnn",
        default=200)
    parser.add_argument(
        "--rnn_layers",
        type=int,
        help="stacked RNN layers",
        default=2)
    parser.add_argument(
        "--keep_prob",
        type=float,
        help="dropout keep probability",
        default=0.85)
    parser.add_argument(
        "--keep_prob_input",
        type=float,
        help="input keep probability",
        default=0.80)

    args = parser.parse_args()

    config = parse_common_config(args)
    config.gru = args.gru
    config.hidden_size = args.hidden_size
    config.rnn_layers = args.rnn_layers
    config.keep_prob = args.keep_prob
    config.keep_prob_input = args.keep_prob_input
    model = RNNModel

    print("Model: rnn, gru: %r, crf: %r, layers: %d\n"
          "Dropout input: %.2f, hidden: %.2f" %
          (config.gru, config.crf, config.rnn_layers,
           config.keep_prob_input, config.keep_prob))

    create_graph(config, model, args)
